axis.title.x=element_text(vjust=-5))
pdf_file = paste(destination_folder_consolidated,"/failures_s_scenarios.pdf",sep = "")
table_file = paste(destination_folder_consolidated,"/summarized_failures_s_scenario.csv",sep = "")
if (with_hpa) {
pdf_file = paste(destination_folder_consolidated,"/failures_s_scenarios_hpa.pdf",sep = "")
table_file = paste(destination_folder_consolidated,"/summarized_failures_s_scenarios_hpa.csv",sep = "")
}
pdf(pdf_file, width = 16, height = 9)
print(figFailures.s.scenario)
failures_per_second_summarized_table = consolidate_summary(filtered_consolidated_table,filtered_consolidated_table$Failures.s,workloads,scenarios)
write.table(failures_per_second_summarized_table, table_file, sep=",",row.names=FALSE)
dev.off()
#filtered_consolidated_table <- consolidated_table[consolidated_table$seconds >= 300,]
######################## GENERATE RESULTS BY TIME ############################
figFailures.s.scenario <- ggplot(consolidated_table_by_time, aes(x=factor(seconds), y=Failures.s, color = factor(scenario))) +
geom_boxplot(position = position_dodge(width = 0.9), outliers = FALSE) +
stat_summary(
fun = median,
geom = 'line',
aes(group = scenario, colour = factor(scenario)),
position = position_dodge(width = 0.9) #this has to be added
) +
facet_wrap(~workload,ncol=1, scales = "free", labeller = as_labeller(c('300'='Low', '2400'='Medium', '4500'='High'))) +
#ggtitle("Failures/s x Scenario") +
xlab("Seconds") +
ylab("Failures per second")+
guides(color = guide_legend(title="Workload")) +
theme(plot.title = element_text(hjust = 0.5, vjust = 5, size = 20),
strip.text = element_text(size= 20),
plot.margin = unit(c(1,1,1,1), "cm"),
axis.text = element_text(size = 16),
axis.text.x = element_text(angle = -45),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.y=element_text(vjust=5),
axis.title.x=element_text(vjust=-5))
pdf_file = paste(destination_folder_by_time,"/failures_s_scenarios.pdf",sep = "")
table_file = paste(destination_folder_by_time,"/summarized_failures_s_scenario.csv",sep = "")
if (with_hpa) {
pdf_file = paste(destination_folder_by_time,"/failures_s_scenarios_hpa.pdf",sep = "")
table_file = paste(destination_folder_by_time,"/summarized_failures_s_scenarios_hpa.csv",sep = "")
}
pdf(pdf_file, width = 16, height = 9)
print(figFailures.s.scenario)
failures_per_second_summarized_table = consolidate_summary_v2(consolidated_table_by_time,consolidated_table_by_time$Failures.s,workloads,scenarios)
write.table(failures_per_second_summarized_table, table_file, sep=",",row.names=FALSE)
dev.off()
# Criar o dataframe com os dados fornecidos
data <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Requests_per_s_with_HPA = c(472, 612.2, 698.15, 897.6, 344.6, 389.85, 457.8, 573.8, 242.3, 333.65, 351.85, 484.7),
Requests_per_s_without_HPA = c(444.1, 476.6, 455, 510, 322.65, 335.25, 354, 382.05, 245.85, 299.05, 305.6, 320.35)
)
# Transformar os dados em formato longo para ggplot
data_long <- data %>%
gather(key = "HPA", value = "Requests_per_s", Requests_per_s_with_HPA, Requests_per_s_without_HPA) %>%
mutate(HPA = recode(HPA, "Requests_per_s_with_HPA" = "with HPA", "Requests_per_s_without_HPA" = "without HPA"))
# Criar uma nova coluna combinando cenário e média de microservices por container
data_long <- data_long %>%
mutate(Scenario_Microservices = paste(scenario, "(", Microservices_per_Container_Average, ")", sep = ""),
Scenario_Microservices = factor(Scenario_Microservices, levels = unique(Scenario_Microservices[order(Microservices_per_Container_Average)])))
# Definir cores para cada workload
workload_colors <- c("Low (300 users)" = "blue", "Medium (2400 users)" = "green", "High (4500 users)" = "orange")
# Definir estilos de linha para HPA e sem HPA
line_styles <- c("with HPA" = "solid", "without HPA" = "dashed")
# Gerar o gráfico
ggplot(data_long, aes(x = Scenario_Microservices, y = Requests_per_s, color = workload_desc, linetype = HPA, shape = HPA)) +
geom_point(size = 3) +
geom_line(aes(group = interaction(workload_desc, HPA))) +
geom_text(aes(label = round(Requests_per_s, 2)), vjust = -1, size = 3) +  # Adiciona os valores dos pontos
scale_color_manual(values = workload_colors) +
scale_linetype_manual(values = line_styles) +
labs(title = "Requests per Second with and without HPA vs Scenario with Microservices per Container Average",
x = "Scenario with Microservices per Container Average",
y = "Requests per Second",
color = "Workload Description",
linetype = "HPA",
shape = "HPA") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
# Criar o dataframe com os dados fornecidos
data <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Requests_per_s_with_HPA = c(472, 612.2, 698.15, 897.6, 344.6, 389.85, 457.8, 573.8, 242.3, 333.65, 351.85, 484.7),
Requests_per_s_without_HPA = c(444.1, 476.6, 455, 510, 322.65, 335.25, 354, 382.05, 245.85, 299.05, 305.6, 320.35)
)
# Transformar os dados em formato longo para ggplot
data_long <- data %>%
gather(key = "HPA", value = "Requests_per_s", Requests_per_s_with_HPA, Requests_per_s_without_HPA) %>%
mutate(HPA = recode(HPA, "Requests_per_s_with_HPA" = "with HPA", "Requests_per_s_without_HPA" = "without HPA"))
# Criar o dataframe com os dados fornecidos
data <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Requests_per_s_with_HPA = c(472, 612.2, 698.15, 897.6, 344.6, 389.85, 457.8, 573.8, 242.3, 333.65, 351.85, 484.7),
Requests_per_s_without_HPA = c(444.1, 476.6, 455, 510, 322.65, 335.25, 354, 382.05, 245.85, 299.05, 305.6, 320.35)
)
# Transformar os dados em formato longo para ggplot
data_long <- data %>%
pivot_longer(cols = starts_with("Requests_per_s_"), names_to = "HPA", values_to = "Requests_per_s") %>%
mutate(HPA = recode(HPA, "Requests_per_s_with_HPA" = "with HPA", "Requests_per_s_without_HPA" = "without HPA"))
library(tidyr)
install.packages("tidyr")
setwd("~/Documentos/Dev/microservices-container-grouping/experiments_results/graphics_and_tables_consolidated/performance/not_hpa")
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
library(tidyr)
# Criar o dataframe com os dados fornecidos
data <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Requests_per_s_with_HPA = c(472, 612.2, 698.15, 897.6, 344.6, 389.85, 457.8, 573.8, 242.3, 333.65, 351.85, 484.7),
Requests_per_s_without_HPA = c(444.1, 476.6, 455, 510, 322.65, 335.25, 354, 382.05, 245.85, 299.05, 305.6, 320.35)
)
# Transformar os dados em formato longo para ggplot
data_long <- data %>%
pivot_longer(cols = starts_with("Requests_per_s_"), names_to = "HPA", values_to = "Requests_per_s") %>%
mutate(HPA = recode(HPA, "Requests_per_s_with_HPA" = "with HPA", "Requests_per_s_without_HPA" = "without HPA"))
# Criar uma nova coluna combinando cenário e média de microservices por container
data_long <- data_long %>%
mutate(Scenario_Microservices = paste(scenario, "(", Microservices_per_Container_Average, ")", sep = ""),
Scenario_Microservices = factor(Scenario_Microservices, levels = unique(Scenario_Microservices[order(Microservices_per_Container_Average)])))
# Definir cores para cada workload
workload_colors <- c("Low (300 users)" = "blue", "Medium (2400 users)" = "green", "High (4500 users)" = "orange")
# Definir estilos de linha para HPA e sem HPA
line_styles <- c("with HPA" = "solid", "without HPA" = "dashed")
# Gerar o gráfico
ggplot(data_long, aes(x = Scenario_Microservices, y = Requests_per_s, color = workload_desc, linetype = HPA, shape = HPA)) +
geom_point(size = 3) +
geom_line(aes(group = interaction(workload_desc, HPA))) +
geom_text(aes(label = round(Request_per_s, 2)), vjust = -1, size = 3) +  # Adiciona os valores dos pontos
scale_color_manual(values = workload_colors) +
scale_linetype_manual(values = line_styles) +
labs(title = "Requests per Second with and without HPA vs Scenario with Microservices per Container Average",
x = "Scenario with Microservices per Container Average",
y = "Requests per Second",
color = "Workload Description",
linetype = "HPA",
shape = "HPA") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
# Criar o dataframe com os dados fornecidos
data <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Requests_per_s_with_HPA = c(472, 612.2, 698.15, 897.6, 344.6, 389.85, 457.8, 573.8, 242.3, 333.65, 351.85, 484.7),
Requests_per_s_without_HPA = c(444.1, 476.6, 455, 510, 322.65, 335.25, 354, 382.05, 245.85, 299.05, 305.6, 320.35)
)
# Transformar os dados em formato longo para ggplot
data_long <- data %>%
pivot_longer(cols = starts_with("Requests_per_s_"), names_to = "HPA", values_to = "Requests_per_s") %>%
mutate(HPA = recode(HPA, "Requests_per_s_with_HPA" = "with HPA", "Requests_per_s_without_HPA" = "without HPA"))
# Criar uma nova coluna combinando cenário e média de microservices por container
data_long <- data_long %>%
mutate(Scenario_Microservices = paste(scenario, "(", Microservices_per_Container_Average, ")", sep = ""),
Scenario_Microservices = factor(Scenario_Microservices, levels = unique(Scenario_Microservices[order(Microservices_per_Container_Average)])))
# Definir cores para cada workload
workload_colors <- c("Low (300 users)" = "blue", "Medium (2400 users)" = "green", "High (4500 users)" = "orange")
# Definir estilos de linha para HPA e sem HPA
line_styles <- c("with HPA" = "solid", "without HPA" = "dashed")
# Gerar o gráfico
ggplot(data_long, aes(x = Scenario_Microservices, y = Requests_per_s, color = workload_desc, linetype = HPA, shape = HPA)) +
geom_point(size = 3) +
geom_line(aes(group = interaction(workload_desc, HPA))) +
geom_text(aes(label = round(Requests_per_s, 2)), vjust = -1, size = 3) +  # Adiciona os valores dos pontos
scale_color_manual(values = workload_colors) +
scale_linetype_manual(values = line_styles) +
labs(title = "Requests per Second with and without HPA vs Scenario with Microservices per Container Average",
x = "Scenario with Microservices per Container Average",
y = "Requests per Second",
color = "Workload Description",
linetype = "HPA",
shape = "HPA") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
library(ggrepel)
# Criar o dataframe com os dados fornecidos
data_failures <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Failures_per_s_without_HPA = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 4.45, 5.00, 2.10, 18.15),
Failures_per_s_with_HPA = c(0.00, 0.00, 0.00, 0.00, 0.10, 0.10, 0.10, 0.10, 2.10, 9.15, 3.80, 0.20)
)
# Transformar os dados em formato longo para ggplot
data_long_failures <- data_failures %>%
gather(key = "HPA", value = "Failures_per_s", Failures_per_s_without_HPA, Failures_per_s_with_HPA) %>%
mutate(HPA = recode(HPA, "Failures_per_s_without_HPA" = "without HPA", "Failures_per_s_with_HPA" = "with HPA"))
# Criar uma nova coluna combinando cenário e média de microservices por container
data_long_failures <- data_long_failures %>%
mutate(Scenario_Microservices = paste(scenario, "(", Microservices_per_Container_Average, ")", sep = ""),
Scenario_Microservices = factor(Scenario_Microservices, levels = unique(Scenario_Microservices[order(Microservices_per_Container_Average)])))
# Gerar o gráfico
ggplot(data_long_failures, aes(x = Scenario_Microservices, y = Failures_per_s, color = factor(workload_desc), shape = HPA)) +
geom_point(size = 3) +
geom_line(aes(linetype = HPA, group = interaction(workload_desc, HPA))) +
geom_text_repel(aes(label = round(Failures_per_s, 2)), size = 3) +  # Adicionar os valores dos pontos com repel para evitar sobreposição
labs(title = "Failures per Second with and without HPA vs Scenario with Microservices per Container Average",
x = "Scenario with Microservices per Container Average",
y = "Failures per Second",
color = "Workload Description",
shape = "HPA",
linetype = "HPA") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "grey80"), panel.grid.minor = element_line(color = "grey90")) +
theme_minimal()
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
library(ggrepel)
library(tidyr)
# Criar o dataframe com os dados fornecidos
data_failures <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Failures_per_s_without_HPA = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 4.45, 5.00, 2.10, 18.15),
Failures_per_s_with_HPA = c(0.00, 0.00, 0.00, 0.00, 0.10, 0.10, 0.10, 0.10, 2.10, 9.15, 3.80, 0.20)
)
# Transformar os dados em formato longo para ggplot
data_long_failures <- data_failures %>%
gather(key = "HPA", value = "Failures_per_s", Failures_per_s_without_HPA, Failures_per_s_with_HPA) %>%
mutate(HPA = recode(HPA, "Failures_per_s_without_HPA" = "without HPA", "Failures_per_s_with_HPA" = "with HPA"))
# Criar uma nova coluna combinando cenário e média de microservices por container
data_long_failures <- data_long_failures %>%
mutate(Scenario_Microservices = paste(scenario, "(", Microservices_per_Container_Average, ")", sep = ""),
Scenario_Microservices = factor(Scenario_Microservices, levels = unique(Scenario_Microservices[order(Microservices_per_Container_Average)])))
# Gerar o gráfico
ggplot(data_long_failures, aes(x = Scenario_Microservices, y = Failures_per_s, color = factor(workload_desc), shape = HPA)) +
geom_point(size = 3) +
geom_line(aes(linetype = HPA, group = interaction(workload_desc, HPA))) +
geom_text_repel(aes(label = round(Failures_per_s, 2)), size = 3) +  # Adicionar os valores dos pontos com repel para evitar sobreposição
labs(title = "Failures per Second with and without HPA vs Scenario with Microservices per Container Average",
x = "Scenario with Microservices per Container Average",
y = "Failures per Second",
color = "Workload Description",
shape = "HPA",
linetype = "HPA") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "grey80"), panel.grid.minor = element_line(color = "grey90")) +
theme_minimal()
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
library(ggrepel)
library(tidyr)
# Criar o dataframe com os dados fornecidos
data_failures <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Failures_per_s_without_HPA = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 4.45, 5.00, 2.10, 18.15),
Failures_per_s_with_HPA = c(0.00, 0.00, 0.00, 0.00, 0.10, 0.10, 0.10, 0.10, 2.10, 9.15, 3.80, 0.20)
)
# Transformar os dados em formato longo para ggplot
data_long_failures <- data_failures %>%
gather(key = "HPA", value = "Failures_per_s", Failures_per_s_without_HPA, Failures_per_s_with_HPA) %>%
mutate(HPA = recode(HPA, "Failures_per_s_without_HPA" = "without HPA", "Failures_per_s_with_HPA" = "with HPA"))
# Criar uma nova coluna combinando cenário e média de microservices por container
data_long_failures <- data_long_failures %>%
mutate(Scenario_Microservices = paste(scenario, "(", Microservices_per_Container_Average, ")", sep = ""),
Scenario_Microservices = factor(Scenario_Microservices, levels = unique(Scenario_Microservices[order(Microservices_per_Container_Average)])))
# Gerar o gráfico
ggplot(data_long_failures, aes(x = Scenario_Microservices, y = Failures_per_s, color = factor(workload_desc), shape = HPA)) +
geom_point(size = 3) +
geom_line(aes(linetype = HPA, group = interaction(workload_desc, HPA))) +
geom_text_repel(aes(label = round(Failures_per_s, 2)), size = 3) +  # Adicionar os valores dos pontos com repel para evitar sobreposição
labs(title = "Failures per Second with and without HPA vs Scenario with Microservices per Container Average",
x = "Scenario with Microservices per Container Average",
y = "Failures per Second",
color = "Workload Description",
shape = "HPA",
linetype = "HPA") +
theme(plot.title = element_text(hjust = 0.5, vjust = 5, size = 20),
strip.text = element_text(size= 16),
plot.margin = unit(c(1,1,1,1), "cm"),
axis.text = element_text(size = 16),
#axis.text.x = element_text(angle = -45),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.y=element_text(vjust=5),
axis.title.x=element_text(vjust=-5))
# Gerar o gráfico
ggplot(data_long_failures, aes(x = Scenario_Microservices, y = Failures_per_s, color = factor(workload_desc), shape = HPA)) +
geom_point(size = 3) +
geom_line(aes(linetype = HPA, group = interaction(workload_desc, HPA))) +
geom_text_repel(aes(label = round(Failures_per_s, 2)), size = 5, show_guide  = FALSE) +  # Adicionar os valores dos pontos com repel para evitar sobreposição
labs(title = "Failures per Second with and without HPA vs Scenario with Microservices per Container Average",
x = "Scenario with Microservices per Container Average",
y = "Failures per Second",
color = "Workload Description",
shape = "HPA",
linetype = "HPA") +
theme(plot.title = element_text(hjust = 0.5, vjust = 5, size = 20),
strip.text = element_text(size= 16),
plot.margin = unit(c(1,1,1,1), "cm"),
axis.text = element_text(size = 16),
#axis.text.x = element_text(angle = -45),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.y=element_text(vjust=5),
axis.title.x=element_text(vjust=-5))
setwd("~/Documentos/Dev/microservices-container-grouping/experiments_results/graphics_and_tables_consolidated/performance")
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
library(ggrepel)
library(tidyr)
# Criar o dataframe com os dados fornecidos
data_failures <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Failures_per_s_without_HPA = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 4.45, 5.00, 2.10, 18.15),
Failures_per_s_with_HPA = c(0.00, 0.00, 0.00, 0.00, 0.10, 0.10, 0.10, 0.10, 2.10, 9.15, 3.80, 0.20)
)
# Transformar os dados em formato longo para ggplot
data_long_failures <- data_failures %>%
gather(key = "HPA", value = "Failures_per_s", Failures_per_s_without_HPA, Failures_per_s_with_HPA) %>%
mutate(HPA = recode(HPA, "Failures_per_s_without_HPA" = "without HPA", "Failures_per_s_with_HPA" = "with HPA"))
# Criar uma nova coluna combinando cenário e média de microservices por container
data_long_failures <- data_long_failures %>%
mutate(Scenario_Microservices = paste(scenario, "(", Microservices_per_Container_Average, ")", sep = ""),
Scenario_Microservices = factor(Scenario_Microservices, levels = unique(Scenario_Microservices[order(Microservices_per_Container_Average)])))
# Gerar o gráfico
ggplot(data_long_failures, aes(x = Scenario_Microservices, y = Failures_per_s, color = factor(workload_desc), shape = HPA)) +
geom_point(size = 3) +
geom_line(aes(linetype = HPA, group = interaction(workload_desc, HPA))) +
geom_text_repel(aes(label = round(Failures_per_s, 2)), size = 5, show_guide  = FALSE) +  # Adicionar os valores dos pontos com repel para evitar sobreposição
labs(title = "Failures per Second with and without HPA vs Scenario with Microservices per Container Average",
x = "Scenario with Microservices per Container Average",
y = "Failures per Second",
color = "Workload Description",
shape = "HPA",
linetype = "HPA") +
theme(plot.title = element_text(hjust = 0.5, vjust = 5, size = 20),
strip.text = element_text(size= 16),
plot.margin = unit(c(1,1,1,1), "cm"),
axis.text = element_text(size = 16),
#axis.text.x = element_text(angle = -45),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.y=element_text(vjust=5),
axis.title.x=element_text(vjust=-5))
pdf_file = paste("resume_failures_s.pdf",sep = "")
pdf(pdf_file, width = 16, height = 9)
print(fig)
setwd("~/Documentos/Dev/microservices-container-grouping/experiments_results/graphics_and_tables_consolidated/performance")
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
library(ggrepel)
library(tidyr)
# Criar o dataframe com os dados fornecidos
data_failures <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Failures_per_s_without_HPA = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 4.45, 5.00, 2.10, 18.15),
Failures_per_s_with_HPA = c(0.00, 0.00, 0.00, 0.00, 0.10, 0.10, 0.10, 0.10, 2.10, 9.15, 3.80, 0.20)
)
# Transformar os dados em formato longo para ggplot
data_long_failures <- data_failures %>%
gather(key = "HPA", value = "Failures_per_s", Failures_per_s_without_HPA, Failures_per_s_with_HPA) %>%
mutate(HPA = recode(HPA, "Failures_per_s_without_HPA" = "without HPA", "Failures_per_s_with_HPA" = "with HPA"))
# Criar uma nova coluna combinando cenário e média de microservices por container
data_long_failures <- data_long_failures %>%
mutate(Scenario_Microservices = paste(scenario, "(", Microservices_per_Container_Average, ")", sep = ""),
Scenario_Microservices = factor(Scenario_Microservices, levels = unique(Scenario_Microservices[order(Microservices_per_Container_Average)])))
# Gerar o gráfico
fig<-ggplot(data_long_failures, aes(x = Scenario_Microservices, y = Failures_per_s, color = factor(workload_desc), shape = HPA)) +
geom_point(size = 3) +
geom_line(aes(linetype = HPA, group = interaction(workload_desc, HPA))) +
geom_text_repel(aes(label = round(Failures_per_s, 2)), size = 5, show_guide  = FALSE) +  # Adicionar os valores dos pontos com repel para evitar sobreposição
labs(title = "Failures per Second with and without HPA vs Scenario with Microservices per Container Average",
x = "Scenario with Microservices per Container Average",
y = "Failures per Second",
color = "Workload Description",
shape = "HPA",
linetype = "HPA") +
theme(plot.title = element_text(hjust = 0.5, vjust = 5, size = 20),
strip.text = element_text(size= 16),
plot.margin = unit(c(1,1,1,1), "cm"),
axis.text = element_text(size = 16),
#axis.text.x = element_text(angle = -45),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.y=element_text(vjust=5),
axis.title.x=element_text(vjust=-5))
pdf_file = paste("resume_failures_s.pdf",sep = "")
pdf(pdf_file, width = 16, height = 9)
print(fig)
dev.off()
setwd("~/Documentos/Dev/microservices-container-grouping/experiments_results/graphics_and_tables_consolidated/performance")
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
library(ggrepel)
library(tidyr)
# Criar o dataframe com os dados fornecidos
data_failures <- data.frame(
workload_desc = c("Low (300 users)", "Low (300 users)", "Low (300 users)", "Low (300 users)",
"Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)", "Medium (2400 users)",
"High (4500 users)", "High (4500 users)", "High (4500 users)", "High (4500 users)"),
workload = c(300, 300, 300, 300, 2400, 2400, 2400, 2400, 4500, 4500, 4500, 4500),
scenario = c("benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one",
"benchmark", "by-dependencies", "by-stack", "all-in-one"),
Microservices_per_Container_Average = c(1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00, 1.00, 1.33, 2.67, 8.00),
Failures_per_s_without_HPA = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 4.45, 5.00, 2.10, 18.15),
Failures_per_s_with_HPA = c(0.00, 0.00, 0.00, 0.00, 0.10, 0.10, 0.10, 0.10, 2.10, 9.15, 3.80, 0.20)
)
# Transformar os dados em formato longo para ggplot
data_long_failures <- data_failures %>%
gather(key = "HPA", value = "Failures_per_s", Failures_per_s_without_HPA, Failures_per_s_with_HPA) %>%
mutate(HPA = recode(HPA, "Failures_per_s_without_HPA" = "without HPA", "Failures_per_s_with_HPA" = "with HPA"))
# Criar uma nova coluna combinando cenário e média de microservices por container
data_long_failures <- data_long_failures %>%
mutate(Scenario_Microservices = paste(scenario, "(", Microservices_per_Container_Average, ")", sep = ""),
Scenario_Microservices = factor(Scenario_Microservices, levels = unique(Scenario_Microservices[order(Microservices_per_Container_Average)])))
# Gerar o gráfico
fig<-ggplot(data_long_failures, aes(x = Scenario_Microservices, y = Failures_per_s, color = factor(workload_desc), shape = HPA)) +
geom_point(size = 3) +
geom_line(aes(linetype = HPA, group = interaction(workload_desc, HPA))) +
geom_text_repel(aes(label = round(Failures_per_s, 2)), size = 5, show_guide  = FALSE) +  # Adicionar os valores dos pontos com repel para evitar sobreposição
labs(
#title = "Failures per Second with and without HPA vs Scenario with Microservices per Container Average",
x = "Scenario with Microservices per Container Average",
y = "Failures per Second",
color = "Workload Description",
shape = "HPA",
linetype = "HPA") +
theme(plot.title = element_text(hjust = 0.5, vjust = 5, size = 20),
strip.text = element_text(size= 16),
plot.margin = unit(c(1,1,1,1), "cm"),
axis.text = element_text(size = 16),
#axis.text.x = element_text(angle = -45),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.y=element_text(vjust=5),
axis.title.x=element_text(vjust=-5))
pdf_file = paste("resume_failures_s.pdf",sep = "")
pdf(pdf_file, width = 16, height = 9)
print(fig)
dev.off()
