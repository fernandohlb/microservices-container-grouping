#Build Golang Applications
FROM golang:1.7.6-alpine as build-go
RUN apk add --update wget
RUN apk add git
RUN apk add unzip
RUN apk add ca-certificates
# RUN apt-get update && apt-get install wget -y
# RUN apt-get install git -y
# RUN apt-get install unzip -y
# RUN apt-get install --reinstall ca-certificates -y
RUN git config --global http.sslVerify false

RUN mkdir repos
RUN mkdir -p src/github.com/microservices-demo
#Build payment
ARG NAME=payment
ARG TAG=0.4.3
ENV FILE=${TAG}.zip
ENV COMPLETE_FILE_NAME=${NAME}'-'${FILE}
ARG REPO_ROOT=https://github.com/microservices-demo/ \
    REPO_ARCHIVE_PATH=/archive/refs/tags/
ENV REPO=${REPO_ROOT}${NAME}${REPO_ARCHIVE_PATH}${FILE}
ENV SCRIPT_DIR=${NAME}'-'${TAG}'/'
RUN echo ${REPO}
RUN cd /go/repos && wget ${REPO} -O ${COMPLETE_FILE_NAME} && unzip ${COMPLETE_FILE_NAME}
RUN cp /go/repos/${SCRIPT_DIR} -rf src/github.com/microservices-demo/${NAME}
RUN go get -u github.com/FiloSottile/gvt
RUN cd /go/src/github.com/microservices-demo/${NAME}/ && gvt restore
RUN cd /go/src/github.com/microservices-demo/${NAME}/cmd/${NAME}svc && CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o ${NAME}
RUN cp /go/src/github.com/microservices-demo/${NAME}/cmd/${NAME}svc/${NAME} /go/bin

#Build catalogue
ARG NAME=catalogue
ARG TAG=0.3.5
ENV FILE=${TAG}.zip
ENV COMPLETE_FILE_NAME=${NAME}'-'${FILE}
ARG REPO_ROOT=https://github.com/microservices-demo/ \
    REPO_ARCHIVE_PATH=/archive/refs/tags/
ENV REPO=${REPO_ROOT}${NAME}${REPO_ARCHIVE_PATH}${FILE}
ENV SCRIPT_DIR=${NAME}'-'${TAG}'/'
RUN echo ${REPO}
RUN cd /go/repos && wget ${REPO} -O ${COMPLETE_FILE_NAME} && unzip ${COMPLETE_FILE_NAME}
RUN cp /go/repos/${SCRIPT_DIR} -rf src/github.com/microservices-demo/${NAME}
RUN go get -u github.com/FiloSottile/gvt
RUN cd /go/src/github.com/microservices-demo/${NAME}/ && gvt restore
RUN cd /go/src/github.com/microservices-demo/${NAME}/cmd/${NAME}svc && CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o ${NAME}
RUN cp /go/src/github.com/microservices-demo/${NAME}/cmd/${NAME}svc/${NAME} /go/bin
RUN cp -R /go/src/github.com/microservices-demo/${NAME}/images/ /go/bin

#Build user
ARG NAME=user
ARG TAG=0.4.7
ENV FILE=${TAG}.zip
ENV COMPLETE_FILE_NAME=${NAME}'-'${FILE}
ARG REPO_ROOT=https://github.com/microservices-demo/ \
    REPO_ARCHIVE_PATH=/archive/refs/tags/
ENV REPO=${REPO_ROOT}${NAME}${REPO_ARCHIVE_PATH}${FILE}
ENV SCRIPT_DIR=${NAME}'-'${TAG}'/'
RUN echo ${REPO}
RUN cd /go/repos && wget ${REPO} -O ${COMPLETE_FILE_NAME} && unzip ${COMPLETE_FILE_NAME}
RUN cp /go/repos/${SCRIPT_DIR} -rf src/github.com/microservices-demo/${NAME}
RUN go get -v github.com/Masterminds/glide
RUN cd /go/src/github.com/microservices-demo/${NAME}/ && glide install
RUN cd /go/src/github.com/microservices-demo/${NAME}/ && CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o ${NAME}
RUN cp /go/src/github.com/microservices-demo/${NAME}/${NAME} /go/bin

FROM golang:1.7-alpine

ENV HATEAOS by-stack-go:8086
ENV USER_DATABASE mongodb
ENV MONGO_HOST user-db
#ENV JAVA_OPTS "-Djava.security.egd=file:/dev/urandom"


#Cria o diretório base do container
WORKDIR /usr/src/

#Copia os binários das aplicações para o diretorio base
COPY --from=build-go /go/bin /usr/src/bin/
COPY --from=build-go /go/bin/images /usr/src/images/
COPY run-apps-go.sh /usr/src/scripts/

EXPOSE 8084-8086
CMD ["sh","scripts/run-apps-go.sh"]

